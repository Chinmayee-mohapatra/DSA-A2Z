#include<bits/stdc++.h>
using namespace std;

void print() {
    cout<<"Chinmayee";
}

int sum(int a, int b) {
    return a+b;
}

int main() {
    print();
    int s = sum(2,3);
    cout<<s;
    return 0;
}

/**
 * C++ STL:
 * 1. Algorithms
 * 2. Containers
 * 3. Functions
 * 4. Iterators
 * 
*/


Pairs:
- utility library

void explainPairs() {
    pair<int, int> p = {1,3};

    cout << p.first << " " << p.second;
    // -- output: p.first = 1 and p.second = 3

    pair<int, pair<int, int>> p = {1, {3,4}}

    cout << p.first << " " << p.second.first << " " << p.second.second;
    // -- output: p.first = 1, p.second.first = 3 and p.second.second = 4

    pair<int, int> arr[] = {{1,2}, {3,4}, {5,6}};

    cout << arr[1].second;
    // -- output: arr[1].second = 4
}



Vector:

void explainVector() {
    // arrays are constant in size
    // Vectors have a dynamic size
    vector<int> v;
    v.push_back(1);
    v.emplace_back(2); pushes 2 at the back. Emplace_back is faster than push_back.
    
    vector<pair<int, int>> vec;
    vec.push_back({1,2});
    vec.emplace_back(1,2);

    vector<int> v(5, 100); {100, 100, 100, 100, 100}

    vector<int> v(5); {0, 0, 0, 0, 0} OR garbage value depending on the compiler

    vector<int> v1(5, 20);
    vector<int> v2(v1); copy v1 into v2(another instance)

    // accessing elements of vector.
    // Let v = {20, 10, 15, 6, 7}
    cout << v[0] << " ";

    vector<int>::iterator it = v.begin();
    // 'it' points to the address of base location
    it++;
    cout<< *(it) << "*";

    it = it+2;
    cout << *(it) << " ";

    vector<int>::iteratos it = v.end();
    // end points to the memory location just after the last element.

    vector<int>::iteratos it = v.rend();
    // rend: reverse-end

    vector<int>::iteratos it = v.rbegin();

    cout << v.back() << " ";
    // back: element at end

    for(vector<int>::iterator it=v.begin(); it !=v.end(); it++) {
        cout << *(it) << " ";
    }

    // auto means auto assignation of the datatype
    for(auto it=v.begin(); it!=v.end(); it++) {
        cout << *(it) << " ";
    }

    for(auto it:v) {
        cout << it << " ";
    }

    // {10, 20, 12, 23}
    v.erase(v.begin()+1);

    // {10, 20, 12, 23, 35}
    v.erase(v.begin() + 2, v.begin() + 4);
    // [start, end) - start element is included. end element is included till its before.

    // Insert Functions

    vector<int> v(2, 100);
    v.insert(v.begin(), 300);
    // v.insert(pos for insertion, element to insert)

    v.insert(v.begin() + 1, 2, 10);

    vector<int> copy(2, 50);
    v.insert(v.begin(), copy.begin(), copy.end());
    // {50, 50, 300, 10, 10, 100, 100}

    cout<< v.size();

    v.pop_back();

    v.swap(v2);

    v.clear();

    cout << v.empty(); - true/false
}

// insert operations are costly for vectors as they are implemented as singlyLL.
// ans insert take place at the front.


List:

void explainList() {
    list<int> ls;

    ls.push_back(2); {2}
    ls.emplace_back(4); {2,4}

    ls.push_front(5); {5,2,4}
    // push_front are cheaper as list are implemented as doublyLL.

    ls.emplace_front();

    // rest functions same as vector
    // begin, end, ebegin, rend, clear, insert, size, swap
}


Dequeue:

void explainDeque() {
    deque<int> dq;
    dq.push_back(1); {1}
    dq.emplace_back(2); {1,2}
    dq.push_front(4); {4,1,2}
    dq.emplace_front(3); {3,4,1,2}

    dq.pop_back(); {3,4,1}
    dq.pop_front(); {4,1}

    dq.back();
    dq.front();

    // rest functions same as vector
    // begin, end, ebegin, rend, clear, insert, size, swap
}


Stack: LIFO
// indexing is not allowed
// push(), pop() and top() are allowed.

void explainStack() {
    stack<int> st;

    st.push(1);
    st.push(2);
    st.push(3);
    st.push(4);
    st.push(5);

    st.emplace(5);

    cout << st.top();

    st.pop();

    cout<< st.top();
    cout<< st.size();
    cout<< st.empty();

    stack<int> st1, st2;
    st1.swap(st2);

}
// all are O(1) operation.


Queue: FIFO

void explainQueue() {
    queue<int> q;
    q.push(1);
    q.push(2);
    q.emplace(4);

    q.back() += 5;

    cout << q.back();

    cout << q.front();

    q.pop();

    cout << q.front();

    // size, swap and empty are same as stack.
}

// O(1) operation

Priority Queue:
// push & pop - O(log n), top - O(1), 
void explainPQ() {
    priority_queue<int> pq;

    pq.push(5); {5}
    pq.push(2); {5, 2}
    pq.push(8); {8, 5, 2}
    pq.emplace(10); {10, 8, 5, 2}

    cout << pq.top(); {10 is printed}

    pq.pop(); {10 is popped off}

    cout << pq.top(); {8 is printed}


    // Minimum heap
    priority_queue<int, vector<int>, greater<int>> pr;
    pq.push(5); {5}
    pq.push(2); {5, 2}
    pq.push(8); {8, 5, 2}
    pq.emplace(10); {10, 8, 5, 2}

    cout << pq.top(); {2 is printed}

    pq.pop(); {2 is popped off.}

    cout << pq.top(); {5 is printed}

}


Set:
// unique elements and sorted order.
// a tree is mainted BTS.
void explainSet() {
    set<int> s;
    s.insert(1);
    s.emplace(2);
    s.insert(2);
    s.insert(4);
    s.insert(3);

    // begin(), end(), rbegin(), rend(), size()
    // empty() and swap() are same as those of above.

    auto it = s.find(3); // returns an iterator which points to '3' element.

    auto it = s.find(6); // if an element is not in the set then it will always return s.end()
    
    s.erase(5); delets 5 and maintains a sorted order -- takes logarithmic time

    int cnt = s.count(1); // return 1(if element present) else return 0(if element is not present).

    auto it = st.find(3);
    s.erase(it); // takes constant time

    auto it1 = s.find(2);
    auto it2 = s.find(4);
    s.erase(it1, it2);

    auto it = s.lower_bound(2);
    auto it = s.upper_bound(3);
}

MultiSet:
sorted but not unique

void explainMultiSet() {
    multiset<int> ms;
    ms.insert(1);
    ms.insert(1);
    ms.insert(1);

    ms.erase(1); // deletes all occurances of 1 present in the multiset

    int cnt = ms.count(1);

    ms.erase(ms.find(1)); // find() will return as iterator to the first element. So only 1 element is deleted.

    ms.erase(ms.find(1), ms.find(1)+2);

    //rest all functions are same.
}


Unordered Set:
unique but not in sorted order

void explainUnorderedSet() {
    unordered_set<int> st;
    //lower_bound and upper_bound functions - doesnot work
    // rest all functions are same
    // it doesnot store in any particular order.
    // it has a better complexity than set in most cases( it takes O(1) time complexity), except some when collision happens(it may take O(N) time complexity).
}

Map:
{key, value} pair, with (keys as unique and in sorted order)
key & value can be of any data structure (int, double, float, pair...).

void explainMap() {
    way1: map<int, int> mpp;

    way2: map<int, pair<int, int>> mpp;

    way3: map<pair<int, int>, int> mpp;

    for way1:
    mpp[1] = 2; // {1,2}
    mpp.emplace({3,1}); // {{1,2}, {3,1}}

    mpp.insert({2,4}); // {{1,2}, {2,4}, {3,1}}

    for way 3:
    mpp[{2,3}] = 10; // {{2,3}, 10}

    for way 1 accessing elements:
    for (auto it:mpp) {
        cout << it.first << " " << it.second << endl;
    }

    cout << mpp[1];
    cout << mpp[5]; // if some value doesnot exists then it prints 0.

    auto it = mpp.find(3);
    cout << *(it).second; // output: 1

    auto it = mpp.find(5);

    auto it = mpp.lower_bound(2);
    auto it = mpp.upper_bound(3);

    // erase(), swap(), size(), and empty() are same as above.
}

Multi Map:

void explainMultiMap() {
    // same as map, only difference is that it allows duplicate keys as well.
    // and mpp[key] cannot be used here
    // O(log n) time
}

Unordered Map:

void explainUnorderedMap() {
    // unique keys and randomized
    // O(1) time, wc: O(N)
}


ALGORITHMS:

in-built comparator: greater<int>

bool comp(pair<int, int> p1, pair<int, int> p2) {
    if(p1.second < p2.second) return true;
    if(p1.second > p2.second) return false;

    if(p1.first > p2.first) return true;
    return false;

}

void explainExtra() {
    sort(a, a+n);
    sort(v.begin(), v.end());

    sort(a+2, a+4); // only a slice of the array is sorted

    sort(a, a+n, greater<int>); // sorted in descending order


    pair<int, int> a[] = {{1,2}, {2,1}, {4,1}};

    // MY-WAY: sort (pair-a) according to second element 
    // if second element is same, then sort it according to first element bit in descending order.

    sort(a, a+n, comp);
    // comp - self writtern comparator.

    // {4, 1}, {2, 1}, {1, 2};

    int num = 7;
    int cnt = _builtin_popcount();

    long long num = 165786578687;
    int cnt = _builtin_popcountll();

    string s = "123";
    // to get all the permutation we need to start from the smallest sorted element
    // if the given element is not in sorted order then we can use s.sort(s.begin(), s.end());
    do {
        cout << s << endl;
    } while(next_permutation(s.begin(), s.end()));

    int maxi = *max_element(a, a+n);
    int mini = *min_element(a, a+n);

}